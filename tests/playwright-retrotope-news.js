import { chromium } from 'playwright';
import OpenAI from 'openai';
import assert from 'assert';

const systemMessage = `
–¢—ã ‚Äî –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–¥–∞–µ—Ç Playwright-–ª–æ–∫–∞—Ç–æ—Ä –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É.
–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞: —Ç–æ–ª—å–∫–æ —Ä–∞–±–æ—á–∏–π –£–ù–ò–ö–ê–õ–¨–ù–´–ô Playwright-–ª–æ–∫–∞—Ç–æ—Ä, –±–µ–∑ –ø–æ—è—Å–Ω–µ–Ω–∏–π –∏ –ø–µ—Ä–µ–Ω–æ—Å–æ–≤ —Å—Ç—Ä–æ–∫.
–ü—Ä–∏–º–µ—Ä—ã: 
'div:nth-child(2) > .info > .details'
'text="Read more"
'.event:nth-child(3) .details'
'css=.event .details'
'text="The Concept of the LPO" >> css=.event .details >> text="Read more"'
–ò—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ Playwright –ª–æ–∫–∞—Ç–æ—Ä—ã: text=..., css=..., –∏–ª–∏ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ locator(). –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π XPath, :text(), :has(), —Å–ª–æ–∂–Ω—ã–µ CSS-–ø—Å–µ–≤–¥–æ—Å–µ–ª–µ–∫—Ç–æ—Ä—ã –∏ –ª—é–±—ã–µ –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏.
–ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ—à—å –Ω–∞–π—Ç–∏, –æ—Ç–≤–µ—Ç—å "NOT FOUND" –∏ –æ–±—ä—è—Å–Ω–∏ –ø–æ—á–µ–º—É –Ω–µ –Ω–∞—à–µ–ª, –∞ —Ç–∞–∫–∂–µ –¥–∞–π –Ω–∞–∏–±–æ–ª–µ–µ –±–ª–∏–∑–∫–∏–π —Ä–∞–±–æ—á–∏–π –≤–∞—Ä–∏–∞–Ω—Ç Playwright-–ª–æ–∫–∞—Ç–æ—Ä–∞, –µ—Å–ª–∏ —Ç–∞–∫–æ–π –µ—Å—Ç—å.
–í–µ—Ä–Ω–∏ –ª–æ–∫–∞—Ç–æ—Ä –¥–ª—è –∫–ª–∏–∫–∞ –ø–æ –ö–õ–ò–ö–ê–ë–ï–õ–¨–ù–û–ú–£ —ç–ª–µ–º–µ–Ω—Ç—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∫–Ω–æ–ø–∫–µ –∏–ª–∏ —Å—Å—ã–ª–∫–µ).
–ï—Å–ª–∏ —Ç–≤–æ–π –ª–æ–∫–∞—Ç–æ—Ä —Å–æ–¥–µ—Ä–∂–∏—Ç :text(, :has(, –¥–≤–æ–π–Ω—É—é —Ç–æ—á–∫—É .. –∏–ª–∏ –ª—é–±—ã–µ —Å–ª–æ–∂–Ω—ã–µ CSS-—Å–µ–ª–µ–∫—Ç–æ—Ä—ã ‚Äî –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä—É–π –æ—Ç–≤–µ—Ç, –ø–æ–∫–∞ –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–π Playwright-–ª–æ–∫–∞—Ç–æ—Ä.
`; // Describes the answer's format, HOW to provide the answer, not WHAT to do

// const userMessage = `–ù–∞–π–¥–∏ –∫–Ω–æ–ø–∫—É, –Ω–∞–∂–∞–≤ –∫–æ—Ç–æ—Ä—É—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–º–æ–∂–µ—Ç –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Å—Ç–∞—Ç—å—é BioWorld Today.`; // Example user message

(async () => {
  //console.log('üöÄ Starting browser...');
  const browser = await chromium.launch({ headless: false, slowMo: 50 }); // headed mode
  // const browser = await chromium.launch(); // headless mode
  const page = await browser.newPage();

  //console.log('üåê Navigating to page...');
  await page.goto('https://www.retrotope.com/news/');
  await page.waitForSelector('body > div > div > section.articles.events.events_page.block');

  // console.log('üìÑ Fetching page content...');
//   const html = await page.$eval('div.cont', el => el.outerHTML);
const html = await page.$eval('body > div > div > section.articles.events.events_page.block', el => el.outerHTML);
//   console.log(html); // Log the HTML content of the page

  console.log('ü§ñ Calling OpenAI...');
  const openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });
  const completion = await openai.chat.completions.create({
  model: 'gpt-4o',
  temperature: 0,
  messages: [
    {
      role: 'system',
      content: systemMessage
    },
    {
      role: 'user',
      content: '–ù–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –µ—Å—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç–∞—Ç–µ–π, —É –∫–∞–∂–¥–æ–π –µ—Å—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –∫–Ω–æ–ø–∫–∞ "Read more". –ù–∞–π–¥–∏ –ö–õ–ò–ö–ê–ë–ï–õ–¨–ù–´–ô —ç–ª–µ–º–µ–Ω—Ç (–∫–Ω–æ–ø–∫—É "Read more"), –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∏–º–µ–Ω–Ω–æ –∫ —Å—Ç–∞—Ç—å–µ —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º "The Concept of the LPO". –í–µ—Ä–Ω–∏ —Ç–æ–ª—å–∫–æ —Ä–∞–±–æ—á–∏–π Playwright-–ª–æ–∫–∞—Ç–æ—Ä –¥–ª—è –∫–ª–∏–∫–∞ –ø–æ —ç—Ç–æ–π –∫–Ω–æ–ø–∫–µ. –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π –Ω–µ–∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã. –í–æ—Ç HTML-–∫–æ–¥ —Å—Ç—Ä–∞–Ω–∏—Ü—ã:' + html
    //   content: '–ù–∞–π—Ç–∏ –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å—Ç–∞—Ç—å—é –ø—Ä–æ "Positive Results from Studies"'  + html
    }
  ]
});

// –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –∫–∞–≤—ã—á–∫–∏ –∏ –ø—Ä–æ–±–µ–ª—ã –∏–∑ –æ—Ç–≤–µ—Ç–∞
let locatorString = completion.choices[0].message.content.trim();

// –£–¥–∞–ª—è–µ–º Markdown-–±–ª–æ–∫–∏ (```css ... ```)
locatorString = locatorString.replace(/```[a-z]*\s*([\s\S]*?)\s*```/i, '$1').trim();

// –£–¥–∞–ª—è–µ–º .locator('...') –∏ locator('...')
locatorString = locatorString.replace(/\.?locator\(['"`](.*)['"`]\)/, '$1');

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
if (
  locatorString.includes(':text(') ||
  locatorString.includes(':has(') ||
  locatorString.includes('..') ||
  locatorString.match(/[\[\]~^$*|]/)
) {
  console.error('‚ùå –õ–æ–∫–∞—Ç–æ—Ä —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:', locatorString);
  await browser.close();
  process.exit(1);
}

const locator = page.locator(locatorString);
console.log('Locator string:', locatorString);
const count = await locator.count();
console.log(`Number of matches: ${count}`);
console.log('‚úÖ Locator received:');
console.log(locator);

if (count !== 1) {
  console.error(`‚ùå –õ–æ–∫–∞—Ç–æ—Ä –¥–æ–ª–∂–µ–Ω –Ω–∞—Ö–æ–¥–∏—Ç—å —Ä–æ–≤–Ω–æ 1 —ç–ª–µ–º–µ–Ω—Ç, –Ω–∞–π–¥–µ–Ω–æ: ${count}`);
  await browser.close();
  process.exit(1);
}

console.log('üëâ Performing click...');
await locator.click();

await page.waitForLoadState('load');
const newUrl = page.url();
console.log('üåç New page URL:', newUrl);

console.log('üéâ Done!');
await browser.close();
})();
